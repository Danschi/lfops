#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2022, Linuxfabrik, Zurich, Switzerland, https://www.linuxfabrik.ch
# The Unlicense (see LICENSE or https://unlicense.org/)

from __future__ import absolute_import, division, print_function

import json
import subprocess

from ansible.module_utils._text import to_text, to_bytes


class BitwardenException(Exception):
    pass


class Bitwarden(object):

    def __init__(self, cli_path='bw'):
        self._cli_path = cli_path

    @property
    def cli_path(self):
        return self._cli_path

    def _run(self, args, **kwargs):
        try:
            p = subprocess.run([self.cli_path] + args, capture_output=True, **kwargs)
        except:
            # exception only raises if cli command is not found
            raise BitwardenException('Bitwarden CLI `{}` not found.'.format(self.cli_path))
        return to_text(p.stdout, errors='surrogate_or_strict'), to_text(p.stderr, errors='surrogate_or_strict'), p.returncode

    @property
    def unlocked(self):
        """Check if the Bitwarden vault is unlocked.
        Bash: `bw status`
        """
        out, err, retc = self._run(['status'])
        out = json.loads(out)
        return out.get('status', '').lower().startswith('unlocked')

    def sync(self):
        """Pull the latest vault data from server.
        Bash: `bw sync`
        """
        out, err, retc = self._run(['sync'])
        if retc != 0 or err:
            raise BitwardenException(err)

    def get_items(self, name, username=None, folder_id=None, collection_id=None, organisation_id=None):
        """Search for items in Bitwarden. Returns a list of the items that match all the given parameters.
        Bash: `bw list items --search myhost`

        A complete object:

        {
          "object": "item",
          "id": "60020baa-e876-4fd4-b5bc-259b5e6389a8",
          "organizationId": "44906ecb-b307-47a5-92b4-a097745592ed",
          "folderId": null,
          "type": 1,
          "reprompt": 0,
          "name": "myhost - purpose",
          "notes": "Generated by Ansible.",
          "favorite": false,
          "login": {
            "uris": [
              {
                "match": null,
                "uri": "https://www.example.com"
              }
            ],
            "username": "username",
            "password": "password",
            "totp": null,
            "passwordRevisionDate": null
          },
          "collectionIds": [
            "153e991a-a56f-4e5d-9dea-c13b9e693fc4"
          ],
          "revisionDate": "2022-06-26T06:00:00.000Z"
        }
        """
        out, err, retc = self._run([
            'list',
            'items',
            '--search',
            name,
        ])
        if retc != 0 or err:
            raise BitwardenException(err)

        try:
            out = json.loads(out)
        except json.decoder.JSONDecodeError as e:
            raise BitwardenException('Unable to load JSON result: {}'.format(e.msg))

        # make sure that all the given parameters exactly match the requested one, as `bw` is not that precise (only performs a search)
        # we are not using the filter parameters of the `bw` utility, as they perform an OR operation, but we want AND
        # import epdb; epdb.serve()
        result = []
        for item in out:
            if item['name'] == name \
                and (item['login']['username'] == username) \
                and (item['folderId'] == folder_id) \
                and (
                    # cover case if collectionIds is an empty list
                    (collection_id is None and not item.get('collectionIds')) \
                    or \
                    (collection_id in item.get('collectionIds', [])) \
                ) \
                and (item['organizationId'] == organisation_id):
                result.append(item)

        return result

    def get_item_by_id(self, item_id):
        """Get an item by ID from Bitwarden. Returns the item or None. Throws an exception if the id leads to unambiguous results.
        Bash: `bw get item 60020baa-e876-4fd4-b5bc-259b5e6389a8`
        """
        out, err, retc = self._run([
            'get',
            'item',
            item_id,
        ])
        if retc == 1 and to_text(err, errors='surrogate_or_strict').lower().startswith('not found'):
            return None

        if retc != 0 or err:
            raise BitwardenException(err)

        try:
            result = json.loads(out)
        except json.decoder.JSONDecodeError as e:
            raise BitwardenException('Unable to load JSON result: {}'.format(e.msg))

        return result

    def generate(self, password_length=40,
        password_uppercase=True, password_lowercase=True,
        password_numeric=True, password_special=False):
        """Return a generated password.
        Bash: `bw generate --uppercase --length 40`
        """
        out, err, retc = self._run([
            'generate',
            '--uppercase' if password_uppercase else '',
            '--lowercase' if password_lowercase else '',
            '--number' if password_numeric else '',
            '--special' if password_special else '',
            '--length', str(password_length),
        ])
        if retc != 0 or err:
            raise BitwardenException(err)
        return out

    def get_template_item_login_uri(self, uris):
        """Get an item.login.uri object from the vault.
        Bash: `bw get template item.login.uri`

        A complete object:

        {
          "match": null,
          "uri": "https://google.com"
        }
        """
        login_uris = []
        if uris:
            # To create uris, fetch the JSON structure for that.
            out, err, retc = self._run([
                'get',
                'template',
                'item.login.uri',
            ])
            if retc != 0 or err:
                raise BitwardenException(err)
            for uri in uris:
                login_uri = json.loads(out)
                login_uri['uri'] = uri
                login_uris.append(login_uri)

        return login_uris

    def get_template_item_login(self, username=None, password=None, login_uris=[]):
        """Get an item.login object from the vault.
        Bash: `bw get template item.login`

        A complete object:

        {
          "uris": [],
          "username": "jdoe",
          "password": "myp@ssword123",
          "totp": "JBSWY3DPEHPK3PXP"
        }
        """
        # To create a login item, fetch the JSON structure for that.
        out, err, retc = self._run([
            'get',
            'template',
            'item.login',
        ])
        if retc != 0 or err:
            raise BitwardenException(err)
        login = json.loads(out)
        login['password'] = password
        login['totp'] = ''
        login['uris'] = login_uris
        login['username'] = username

        return login

    def get_template_item(self, name, login=None, notes=None, organization_id=None, collection_ids=None, folder_id=None):
        """Get an item.login object from the vault.
        Bash: `bw get template item`

        A complete item object:

        {
          "organizationId": null,
          "collectionIds": null,
          "folderId": null,
          "type": 1,
          "name": "Item name",
          "notes": "Some notes about this item.",
          "favorite": false,
          "fields": [],
          "login": null,
          "secureNote": null,
          "card": null,
          "identity": null,
          "reprompt": 0
        }
        """
        # To create an item later on, fetch the item JSON structure, and fill in the appropriate
        # values.
        out, err, retc = self._run([
            'get',
            'template',
            'item',
        ])
        if retc != 0 or err:
            raise BitwardenException(err)
        item = json.loads(out)
        item['collectionIds'] = collection_ids
        item['folderId'] = folder_id
        item['login'] = login
        item['name'] = name
        item['notes'] = notes
        item['organizationId'] = organization_id

        return item

    def encode(self, item):
        """base64 encode a Bitwarden item dictionary.
        Bash: `echo ... | bw encode`
        """
        out, err, retc = self._run(
            [
                'encode',
            ],
            input=to_bytes(json.dumps(item)),
        )
        if retc != 0 or err:
            raise BitwardenException(err)
        return to_text(out, errors='surrogate_or_strict')

    def create_item(self, encoded_item):
        """Creates an item object in Bitwarden from the base64-encoded string.
        Bash: `echo ... | bw create item`
        """
        out, err, retc = self._run(
            [
                'create',
                'item',
            ],
            input=to_bytes(encoded_item),
        )
        if retc != 0 or err:
            raise BitwardenException(err)
        return to_text(out, errors='surrogate_or_strict')

    def edit_item(self, encoded_item, item_id):
        """Edits an item object in Bitwarden from the base64-encoded string.
        Bash: `echo ... | bw create item`
        """
        out, err, retc = self._run(
            [
                'edit',
                'item',
                item_id,
            ],
            input=to_bytes(encoded_item),
        )
        if retc != 0 or err:
            raise BitwardenException(err)
        return to_text(out, errors='surrogate_or_strict')

    def add_attachment(self, item_id, attachment_path):
        """Adds the file at `attachment_path` to the item specified by `item_id`
        Bash: `bw create attachment --itemid 2249002a-d6f2-404b-96a4-ae4500f08a32 --file /tmp/privkey`
        """
        out, err, retc = self._run(
            [
                'create',
                'attachment',
                '--itemid',
                item_id,
                '--file',
                attachment_path,
            ],
        )
        if retc != 0 or err:
            raise BitwardenException(err)
        return to_text(out, errors='surrogate_or_strict')

    @staticmethod
    def get_pretty_name(name, hostname=None, purpose=None):
        """create a nice name for the item if none is given
        schemes:
        * hostname - purpose (for example "app4711 - MariaDB")
        * hostname (for example "app4711")
        """
        if not name:
            name = hostname
            if purpose:
                name += ' - {}'.format(purpose)

        return name
