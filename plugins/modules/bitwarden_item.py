#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2022, Linuxfabrik GmbH, Zurich, Switzerland, https://www.linuxfabrik.ch
# The Unlicense (see LICENSE or https://unlicense.org/)

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = r'''
module: bitwarden_item

short_description: Create, update and fetch Bitwarden items

description:
    - This Ansible module returns a password item from Bitwarden by searching for an item name or an item ID.
    - If no password item is found, a new item is created. Useful for automation.
    - If you do not specify a name or Bitwarden ID, it searches using the name/title.
    - If there is an existing Bitwarden item that differs from the given parameters, the item is updated, and the updated item is returned.
    - If a search returns multiple entries, this lookup plugin throws an error, since it cannot decide which one to use.
    - On success, this lookup plugin returns the complete Bitwarden item object.
    - If you don't specify a name/title for a password item, a name/title will be created automatically, using C(hostname - purpose) (for example "C(dbserver - MariaDB)") or just C(hostname) (for example "C(dbserver)", depending on what is provided).

notes:
    - Tested with C(bw) version 2023.5.0
    - This lookup plugin just handles password items, nothing else.
    - It does not handle TOTP at all.
    - It cannot edit URIs in existing password items.
    - You can get the organization, collection and folder IDs from the URL in the Bitwarden Web-GUI.

requirements:
    - Requires the Bitwarden CLI tool C(bw) version v2022.9.0+. Have a look at U(https://bitwarden.com/help/article/cli/) for installation instructions.
    - You must already be logged in to Bitwarden using the CLI tool and have the client API running. You can login to the vault using `bw login` and `bw unlock`, then start the client RESTful API webserver by running `bw serve --hostname 127.0.0.1`.

author:
    - Linuxfabrik GmbH, Zurich, Switzerland, https://www.linuxfabrik.ch

version_added: "1.0.0"

options:
    attachments:
        description: List of attachments on the bitwarden item. The name of the attachments will be the basename of the files. Note that Bitwarden allows duplicate file names but this module does not, and instead uses the file name as the unique key. This means it assumes that if there is an already uploaded attachment with the same name, it has the same content as the local file.
        required: False
        type: list
    collection_id:
        description: Bitwarden collection IDs in which the password item is stored.
        required: False
        type: str
    folder_id:
        description: Bitwarden folder ID in which the password item is stored.
        default: None
        required: False
        type: str
    hostname:
        description: Hostname to which the password belongs. Used for automatic name/title generation if I(name) is not specified.
        required: False
        type: str
    id:
        description: If specified, searches for the specified item ID instead of the name. This also means all other filters will be ignored.
        required: False
        type: str
    name:
        description: Name/Title of the password item. If set, automatic name/title generation is switched off.
        required: False
        type: str
    notes:
        description: Any notes on the password item. This is limited to 10000 characters by Bitwarden.
        default: 'Generated by Ansible.'
        required: False
        type: str
    organization_id:
        description: Bitwarden Organization ID to which the password item belongs.
        required: False
        type: str
    password:
        description: The password of the Bitwarden item.
        default: None
        required: False
        type: str
    purpose:
        description: The purpose of the password. What is it for? Used for automatic name/title generation if I(name) is not specified. For example, C(MariaDB) or C(Rocky).
        required: False
        type: str
    uris:
        description: List of URIs on the password item.
        required: False
        type: list
    username:
        description: Username of the password item.
        required: False
        type: str
'''

EXAMPLES = r'''
- name: 'Get or create a password item from Bitwarden (automated name creation).'
  linuxfabrik.lfops.bitwarden_item:
    hostname: 'appsrv11'
    purpose: 'MariaDB'
    username: 'mariadb-admin'
  register: creds

- name: 'Add a password to the above item'
  linuxfabrik.lfops.bitwarden_item:
    hostname: 'appsrv11'
    purpose: 'MariaDB'
    username: 'mariadb-admin'
    password: 'linuxfabrik'
  register: creds

- debug:
    msg: 'ID: "{{ creds.id }}", Name: "{{ creds.name }}", Username: "{{ creds.username }}", Password: "{{ creds.password }}"'

- name: 'Change name/title of Bitwarden item by using the ID'
  linuxfabrik.lfops.bitwarden_item:
    id: '62b779ca-cb95-4d61-864d-ee670995686a'
    name: 'appsrv133 - New name'
  register: creds

# a full-fledged example
- name: 'Get or create a password item from Bitwarden (automated name creation).'
  linuxfabrik.lfops.bitwarden_item:
    collection_id: '4649ec03-c1be-4d5a-9413-7f7ad8ebbace'
    organization_id: '06c7691f-c64f-4140-8680-d4f60a9cb038'
    hostname: 'appsrv12'
    notes: 'please note'
    purpose: 'MariaDB'
    username: 'mariadb-admin'
    password: 'linuxfabrik'
    uris:
     - 'https://www.example.com'
     - 'https://www.example.org'
  register: creds

- name: 'Set multiple attachments. '
  linuxfabrik.lfops.bitwarden_item:
    hostname: 'appsrv11'
    purpose: 'MariaDB'
    attachments:
      - /tmp/file1
      - /tmp/file2
  register: creds
'''

RETURN = r'''
collectionIds:
    description: List of collection IDs in which the item is.
    type: list
    returned: always
    sample: [ '58a5a2ef-93ca-4ca3-81de-f9b0f2d947a7' ]
favorite:
    description: Whether the item is favorited or not.
    type: bool
    returned: always
    sample: False
folderId:
    description: Bitwarden folder ID in which the item is.
    type: str
    returned: always
    sample: '6fb1792a-dc44-4306-8669-aca5a8bb0e72'
id:
    description: Unique Bitwarden password item ID.
    type: str
    returned: always
    sample: 'daba87c4-44d4-47ee-be7f-f21cb0fc8ea6'
login:
    description: A Bitwarden login object (dictionary).
    returned: always
    type: dict
    contains:
      password:
          description: The password.
          type: str
          returned: always
          sample: '69hFM533bJre2cIO9vXkVnvF1RK5Br'
      passwordRevisionDate:
          description: The last time the password was changed.
          type: str
          returned: always
          sample: '2022-02-23T08:49:21.437Z'
      totp:
          description: TOTP.
          type: str
          returned: always
          sample: 634990
      uris:
          description: A list of Bitwarden URI objects (dictionaries).
          type: complex
          returned: always
          contains:
            match:
                description: Match algorithm.
                type: int
                returned: always
                sample: None
            uri:
                description: The URL.
                type: str
                returned: always
                sample: 'https://www.example.com'
      username:
            description: Username to which the password belongs.
            type: str
            returned: always
            sample: 'root'
name:
    description: Name/Title of the password item.
    type: str
    returned: always
    sample: 'appsrv01 - MariaDB'
notes:
    description: Some notes about the cipher.
    type: str
    returned: always
    sample: 'Automatically generated by Ansible.'
object:
    description: Type of the Bitwarden object. Always returns C(item).
    type: str
    returned: always
    sample: 'item'
organizationId:
    description: The ID of the organization.
    type: str
    returned: always
    sample: '7845ea14-5364-4c62-82ba-383864e47889'
password:
    description: The password. Same as under the C(login) dict, but at a higher level for easier access.
    type: str
    returned: always
    sample: '6VuIkoKQmCl9Yyv3xpgjU6SF2ecs6k'
reprompt:
    description: If Bitwarden should re-prompt for the master password when accessing this item.
    type: int
    returned: always
    sample: 0
revisionDate:
    description: Date/Time the item was created or last modified.
    type: str
    returned: always
    sample: '2019-01-28T15:31:34.300Z'
type:
    description: Unclear from upstream documentation.
    type: int
    returned: always
    sample: 1
username:
    description: Username to which the password belongs. Same as under the C(login) dict, but at a higher level for easier access.
    type: str
    returned: always
    sample: 'root'
'''

import os

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.linuxfabrik.lfops.plugins.module_utils.bitwarden import \
    Bitwarden


def diff_and_update(current, target):
    '''Diffs the current item with the target item and checks if there are relevant changes.
    Returns (changed, updated_item). The updated_item can be send to `bw` to update the remote item.
    '''

    def check_dict_for_changes(current, target):
        changed = False
        for key, value in target.items():
            if isinstance(value, dict):
                if check_dict_for_changes(current.get(key, {}), value):
                    changed = True

            elif (value != current.get(key)) \
                and not (not value and not current.get(key)): # compare None to emtpy lists and empty strings
                changed = True

        return changed

    # take over id
    target['id'] = current.get('id')

    changed = check_dict_for_changes(current, target)

    return (changed, target)


def run_module():
    # define available arguments/parameters a user can pass to this module
    module_args = dict(
        attachments=dict(type='list', required=False, default=[]),
        collection_id=dict(type='str', required=False, default=None),
        folder_id=dict(type='list', required=False, default=None),
        hostname=dict(type='str', required=False, default=None),
        id=dict(type='str', required=False, default=None),
        name=dict(type='str', required=False, default=None),
        notes=dict(type='str', required=False, default='Generated by Ansible.'),
        organization_id=dict(type='str', required=False, default=None),
        password=dict(type='str', required=False, default=None, no_log=False), # if we set it to True, the passwords in the RETURN values are masked too. see https://github.com/ansible/ansible/issues/71789
        purpose=dict(type='str', required=False, default=None),
        uris=dict(type='list', required=False, default=None),
        username=dict(type='str', required=False, default=None),
    )

    # the AnsibleModule object will be our abstraction working with Ansible
    # this includes instantiation, a couple of common attr would be the
    # args/params passed to the execution, as well as if this module
    # supports check mode
    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    attachments = module.params['attachments']
    if attachments:
        basenames = [os.path.basename(attachment) for attachment in attachments]
        if len(set(basenames)) < len(basenames):
            module.fail_json('This module cannot handle multiple attachments with the same basename.')

        for attachment in attachments:
            if not os.access(attachment, os.R_OK):
                module.fail_json('Could not read the attachments at "{}".'.format(attachment))

    # extract the variables to make the code more readable
    collection_id = module.params['collection_id']
    folder_id = module.params['folder_id']
    hostname = module.params['hostname']
    item_id = module.params['id']
    name = module.params['name']
    notes = module.params['notes']
    organization_id = module.params['organization_id']
    password = module.params['password']
    purpose = module.params['purpose']
    uris = module.params['uris']
    username = module.params['username']

    bw = Bitwarden()

    if not bw.is_unlocked:
        module.fail_json('Not logged into Bitwarden, or Bitwarden Vault is locked. Please run `bw login` and `bw unlock` first.')

    # to be sure we are up to date
    bw.sync()

    changed = False
    if item_id:
        current_item = bw.get_item_by_id(item_id)
    else:
        name = Bitwarden.get_pretty_name(name, hostname, purpose)
        current_items = bw.get_items(name, username, folder_id, collection_id, organization_id)

        if len(current_items) > 1:
            module.fail_json(msg='Found multiple items with the same name/title and username, cannot decide which one to use. Aborting.')

        try:
            current_item = current_items[0]
        except IndexError:
            current_item = None

    login_uris = bw.get_template_item_login_uri(uris)
    login = bw.get_template_item_login(username, password, login_uris)
    target_item = bw.get_template_item(
        name,
        login,
        notes,
        organization_id,
        collection_id,
        folder_id,
    )
    if current_item:
        # check if changed, adjust if necessary
        changed, updated_item = diff_and_update(current_item, target_item)
        if changed:
            out = bw.edit_item(updated_item, updated_item['id'])
        else:
            result = current_item

    else:
        # generate a new one
        changed = True
        result = bw.create_item(target_item)

    if attachments:
        current_attachments = set(current_attachment['fileName'] for current_attachment in result.get('attachments', []))
        attachments_changed = False
        for attachment in attachments:
            if os.path.basename(attachment) not in current_attachments:
                attachments_changed = True
                bw.add_attachment(result['id'], attachment)

        if attachments_changed:
            changed = True
            # we need to fetch the item again, so that it also contains the newly added attachments
            result = bw.get_item_by_id(result['id'])

    result['changed'] = changed
    # move username and password higher for easier access
    result['username'] = result['login']['username']
    result['password'] = result['login']['password']
    module.exit_json(**result)


def main():
    run_module()


if __name__ == '__main__':
    main()
