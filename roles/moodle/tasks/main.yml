- block:

  - name: 'mkdir -p {{ moodle__install_dir }}'
    ansible.builtin.file:
      path: '{{ moodle__install_dir }}'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o755

  - name: 'Get all moodle release versions'
    ansible.builtin.uri:
      url: 'https://api.github.com/repos/moodle/moodle/tags'
    register: 'moodle__github_release'
    check_mode: false # run task even if `--check` is specified
    delegate_to: 'localhost'
    run_once: true

  - name: 'Get the latest v4.1 (LTS) version of moodle'
    ansible.builtin.set_fact:
      moodle__github_version: '{{ item["name"] }}'
    loop: '{{ moodle__github_release["json"] }}'
    loop_control:
      label: '{{ item["name"] }}'
    when:
      - 'item["name"] is search("^v4\.1\.")'
      - 'not moodle__github_version | d()' # stop after the first match

  - name: 'check that moodle__github_version is set'
    ansible.builtin.assert:
      that: 'moodle__github_version is defined'
      fail_msg: 'Could not find the latest Moodle version'

  - name: 'moodle__github_version:'
    ansible.builtin.debug:
      var: 'moodle__github_version'

  - name: 'curl --location https://github.com/moodle/moodle/archive/refs/tags/{{ moodle__github_version }}.tar.gz --output /tmp/moodle-{{ moodle__github_version }}.tar.gz'
    ansible.builtin.get_url:
      url: 'https://github.com/moodle/moodle/archive/refs/tags/{{ moodle__github_version }}.tar.gz'
      dest: '/tmp/moodle-{{ moodle__github_version }}.tar.gz'
      mode: 0o644
    delegate_to: 'localhost'
    changed_when: false # not an actual config change on the server
    check_mode: false # run task even if `--check` is specified

  - name: 'Copy /tmp/moodle-{{ moodle__github_version }}.tar.gz to {{ inventory_hostname }}:/tmp/moodle-{{ moodle__github_version }}.tar.gz'
    ansible.builtin.copy:
      src: '/tmp/moodle-{{ moodle__github_version }}.tar.gz'
      dest: '/tmp/moodle-{{ moodle__github_version }}.tar.gz'

  - name: 'cd {{ moodle__install_dir }} && tar xfz --strip-components 1 /tmp/moodle-{{ moodle__github_version }}.tar.gz'
    ansible.builtin.unarchive:
      src: '/tmp/moodle-{{ moodle__github_version }}.tar.gz'
      dest: '{{ moodle__install_dir }}'
      remote_src: false
      extra_opts:
        - '--strip-components=1'

  - name: 'mkdir -p {{ moodle__data_dir }}'
    ansible.builtin.file:
      path: '{{ moodle__data_dir }}'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o755

  - name: 'sudo -u apache /usr/bin/php admin/cli/install.php ...'
    ansible.builtin.command: >
      php {{ moodle__install_dir }}/admin/cli/install.php
        --chmod=2750
        --lang=en
        --wwwroot={{ moodle__url }}
        --dataroot={{ moodle__data_dir }}
        --dbtype=mariadb
        --dbhost={{ moodle__database_host }}
        --dbname={{ moodle__database_name }}
        --dbuser={{ moodle__database_login["username"] }}
        --dbpass={{ moodle__database_login["password"] }}
        --dbport={{ moodle__database_port }}
        --dbsocket={{ moodle__database_socket }}
        --prefix={{ moodle__database_table_prefix }}
        --fullname='{{ moodle__site_fullname }}'
        --shortname='{{ moodle__site_shortname }}'
        --summary='{{ moodle__site_summary }}'
        --adminuser={{ moodle__admin["username"] }}
        --adminpass={{ moodle__admin["password"] }}
        --adminemail={{ moodle__admin["email"] }}
        --sitepreset={{ moodle__sitepreset }}
        --supportemail={{ moodle__supportemail }}
        --upgradekey={{ moodle__upgradekey }}
        --non-interactive
        --agree-license
    args:
      chdir: '{{ moodle__install_dir }}'
      # if running against an already existing moodle instance, we get
      # `The configuration file config.php already exists. Please use admin/cli/install_database.php to upgrade Moodle for this site.`
      creates: '{{ moodle__install_dir }}/config.php'
    become: true
    become_user: 'apache'

  - name: 'Configure Moodle if behind a TLS-terminating reverse proxy ($CFG->sslproxy = true)'
    ansible.builtin.lineinfile:
      path: '{{ moodle__install_dir }}/config.php'
      regexp: '^\$CFG->sslproxy'
      line: '$CFG->sslproxy = {{ moodle__behind_reverse_proxy | lower }};'
      insertbefore: '^require_once'
      mode: 0o440
      state: 'present'

  - name: 'Security checks > Executable paths: Executable paths only settable in config.php'
    ansible.builtin.lineinfile:
      path: '{{ moodle__install_dir }}/config.php'
      regexp: '^\$CFG->preventexecpath'
      line: '$CFG->preventexecpath = true;'
      insertbefore: '^require_once'
      mode: 0o440
      state: 'present'

  - name: 'find {{ moodle__install_dir }} -type f -exec chmod --changes 0440 {} \;'
    ansible.builtin.command: 'find {{ moodle__install_dir }} -type f -exec chmod --changes 0440 {} \;'
    register: 'moodle__chmod_files_result'
    changed_when: 'moodle__chmod_files_result["stdout"] | length'

  # this is needed for monitoring plugins and an icinga user, for example
  - name: 'chmod o+r {{ moodle__install_dir }}/version.php'
    ansible.builtin.file:
      path: '{{ moodle__install_dir }}/version.php'
      mode: 'o+r'

  tags:
    - 'moodle'


- block:

  - name: 'Deploy /etc/systemd/system/moodle-cron.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/moodle-cron.service.j2'
      dest: '/etc/systemd/system/moodle-cron.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'moodle: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/moodle-cron.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/moodle-cron.timer.j2'
      dest: '/etc/systemd/system/moodle-cron.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'moodle: systemctl daemon-reload'

  tags:
    - 'moodle'
    - 'moodle:cron'


- block:

  - name: 'systemctl {{ moodle__timer_cron_enabled | bool | ternary("enable", "disable") }} moodle-cron.timer --now'
    ansible.builtin.systemd:
      name: 'moodle-cron.timer'
      state: '{{ moodle__timer_cron_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ moodle__timer_cron_enabled }}'

  tags:
    - 'moodle'
    - 'moodle:cron'
    - 'moodle:state'


- block:

  # download moosh from moodle.org instead of GiHub, because then we don't have to bother with
  # `composer install` running as user apache to download additional vendor libraries etc;
  # the moodle.org file has all batteries included.
  - name: 'curl --location {{ moodle__moosh_download_url }} --output /tmp/moosh.zip'
    ansible.builtin.get_url:
      url: '{{ moodle__moosh_download_url }}'
      dest: '/tmp/moosh.zip'
      mode: 0o644
    delegate_to: 'localhost'
    changed_when: false # not an actual config change on the server
    check_mode: false # run task even if `--check` is specified

  - name: 'mkdir -p /opt/moosh'
    ansible.builtin.file:
      path: '/opt/moosh'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o755

  - name: 'Copy /tmp/moosh.zip to {{ inventory_hostname }}:/tmp/moosh.zip'
    ansible.builtin.copy:
      src: '/tmp/moosh.zip'
      dest: '/tmp/moosh.zip'
      mode: 0o644

  - name: 'cd /opt/moosh && unzip /tmp/moosh.zip'
    ansible.builtin.unarchive:
      src: '/tmp/moosh.zip'
      dest: '/opt'
      remote_src: true

  - name: 'find /opt/moosh -type f -exec chmod --changes 0440 {} \;'
    ansible.builtin.command: 'find /opt/moosh -type f -exec chmod --changes 0440 {} \;'
    register: 'moodle__chmod_files_result'
    changed_when: 'moodle__chmod_files_result["stdout"] | length'

  tags:
    - 'moodle'
    - 'moodle:moosh'


- block:

  - name: 'chown -R apache:apache {{ item }}'
    ansible.builtin.file:
      path: '{{ item }}'
      owner: 'apache'
      group: 'apache'
      recurse: true
    loop:
      - '{{ moodle__data_dir }}'
      - '{{ moodle__install_dir }}'
      - '/opt/moosh'

  - name: 'restorecon -Fvr ...'
    ansible.builtin.command: 'restorecon -Fvr {{ item }}'
    register: 'moodle__restorecon_moodle_result'
    changed_when: 'moodle__restorecon_moodle_result["stdout"] | length'
    loop:
      - '{{ moodle__data_dir }}'
      - '{{ moodle__install_dir }}'
      - '/opt/moosh'

  - name: 'Configure Redis via Moosh'
    ansible.builtin.command: >
      php /opt/moosh/moosh.php --user={{ moodle__admin["username"] }}
      {{ item }}
    loop:
      - 'cache-add-redis-store redis 127.0.0.1:6379'
      - 'cache-edit-mappings --application=redis --session=redis'
    args:
      chdir: '{{ moodle__install_dir }}'
    become: true
    become_user: 'apache'
    # if running on existing items, we get errors. in this case, go on.
    ignore_errors: true

  tags:
    - 'moodle'
    - 'moodle:cron'
    - 'moodle:moosh'
    - 'moodle:state'


- block:

  - name: 'Run Moosh commands...'
    ansible.builtin.command: >
      php /opt/moosh/moosh.php --user={{ moodle__admin["username"] }}
      {{ item }}
    loop: '{{ moodle__moosh_commands }}'
    args:
      chdir: '{{ moodle__install_dir }}'
    become: true
    become_user: 'apache'
    # if running on existing items, we get errors. in this case, go on.
    ignore_errors: true

  tags:
    - 'never'
    - 'moodle:moosh_run'
