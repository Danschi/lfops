- block:

  - name: 'Set platform/version specific variables'
    ansible.builtin.import_role:
      name: 'shared'
      tasks_from: 'platform-variables.yml'

  tags:
    - 'monitoring_plugins'
    - 'monitoring_plugins:custom'


- block:

  - name: 'Translate user-friendly monitoring_plugins__version to internal version'
    ansible.builtin.set_fact:
      # Returns the corresponding mapped value if it exists, otherwise it returns the original value:
      # * If monitoring_plugins__version is "stable", it will map to "latest", and if it's "dev",
      #   it will map to "main".
      # * If the user sets a version number like "1.2.0.11", it is set to "v1.2.0.11" if installing
      #   from source (according to GitHub tag), otherwise remains unchanged.
      __monitoring_plugins__version: >-
        {{
          {
            'stable': 'latest',
            'dev': 'main',
            'latest': 'latest',
            'main': 'main',
          }.get(
            monitoring_plugins__version,
            (("v" + monitoring_plugins__version)
              if (monitoring_plugins__install_method == 'source')
              else monitoring_plugins__version)
          )
        }}

  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Debug'
    ansible.builtin.debug:
      msg:
        - 'Target OS: {{ ansible_facts["os_family"] }}'
        - 'monitoring_plugins__install_method: {{ monitoring_plugins__install_method }}'
        - 'monitoring_plugins__version: {{ monitoring_plugins__version }}'
        - '__monitoring_plugins__version: {{ __monitoring_plugins__version }}'

  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Make sure sudo is installed (sometimes missing on Debian)'
    ansible.builtin.package:
      name: 'sudo'
      state: 'present'
  when:
    - 'ansible_facts["os_family"] != "Windows"'

  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Linux: Install Linuxfabrik Monitoring Plugins from package (rpm, deb)'
    ansible.builtin.include_tasks: 'linux-package.yml'
    when:
      - 'ansible_facts["os_family"] != "Windows"'
      - 'monitoring_plugins__install_method == "package"'

  - name: 'Linux: Install Linuxfabrik Monitoring Plugins from source'
    ansible.builtin.include_tasks: 'linux-source.yml'
    when:
      - 'ansible_facts["os_family"] != "Windows"'
      - 'monitoring_plugins__install_method == "source"'


  - name: 'Windows: Install Linuxfabrik Monitoring Plugins from package'
    ansible.builtin.include_tasks: 'windows-package.yml'
    when:
      - 'ansible_facts["os_family"] == "Windows"'
      - 'monitoring_plugins__install_method == "package"'

  - name: 'Windows: Install Linuxfabrik Monitoring Plugins from archive'
    ansible.builtin.include_tasks: 'windows-archive.yml'
    when:
      - 'ansible_facts["os_family"] == "Windows"'
      - 'monitoring_plugins__install_method == "archive"'

  tags:
    - 'monitoring_plugins'


# Housekeeping, remove legacy stuff
- block:

  - name: 'Make sure the legacy sudoers file is absent'
    ansible.builtin.file:
      path: '/etc/sudoers.d/icinga2-plugins'
      state: 'absent'

  - name: 'Make sure the Linuxfabrik plugin cache is removed'
    ansible.builtin.file:
      path: '/tmp/linuxfabrik-plugin-cache.db'
      state: 'absent'

  when:
    - 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Make sure the Linuxfabrik plugin cache is removed'
    ansible.windows.win_file:
      path: 'C:\ProgramData\icinga2\usr\lib64\nagios\plugins'
      state: 'absent'

  when:
    - 'ansible_facts["os_family"] == "Windows"'
  tags:
    - 'monitoring_plugins'


# Pimp local software
- block:

  - name: 'Check if /var/www/html/localhost exists (monitoring.php for php-status)'
    ansible.builtin.stat:
      path: '/var/www/html/localhost'
    register: 'monitoring_plugins__stat_var_www_html_localhost_result'

  - name: 'Deploy /var/www/html/localhost/monitoring.php (monitoring.php for php-status)'
    ansible.builtin.copy:
      src: '/tmp/ansible.monitoring-plugins-repo/check-plugins/php-status/assets/monitoring.php'
      dest: '/var/www/html/localhost/monitoring.php'
      owner: '{{ __monitoring_plugins__webserver_user }}'
      group: '{{ __monitoring_plugins__webserver_user }}'
      mode: 0o644
    when:
      - 'monitoring_plugins__stat_var_www_html_localhost_result["stat"]["exists"]'

  - name: 'Check if /usr/share/icingaweb2/public/img/icons exists'
    ansible.builtin.stat:
      path: '/usr/share/icingaweb2/public/img/icons'
    register: '__monitoring_plugins__stat_usr_share_icingaweb2_public_img_icons_result'

  - name: 'rsync icons to IcingaWeb2'
    ansible.posix.synchronize:
      src: '/tmp/ansible.monitoring-plugins-repo-flattened/check-plugins/icons/'
      dest: '/usr/share/icingaweb2/public/img/icons'
      mode: 'push'
    when:
      - '__monitoring_plugins__stat_usr_share_icingaweb2_public_img_icons_result["stat"]["exists"]'

  # block
  when:
    - 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Check if custom plugins exist'
    ansible.builtin.stat:
      path: '{{ inventory_dir }}/host_files/{{ inventory_hostname }}/usr/lib64/nagios/plugins'
    delegate_to: 'localhost'
    changed_when: false
    register: '__monitoring_plugins__custom_plugins'

  - name: 'Copy the custom plugins to /usr/lib64/nagios/plugins'
    ansible.builtin.copy:
      src: '{{ item }}'
      dest: '/usr/lib64/nagios/plugins/'
      mode: 'preserve'
      backup: true
    when:
      - '__monitoring_plugins__custom_plugins.stat.exists'
    # use loop for nicer diff
    with_fileglob:
      - '{{ inventory_dir }}/host_files/{{ inventory_hostname }}/usr/lib64/nagios/plugins/*'

  # block
  when:
    - 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'monitoring_plugins'
    - 'monitoring_plugins:custom'
