- block:

  - name: 'Set a downtime for the host (Windows)' # noqa ignore-errors (it is possible that the host does not yet exist in icinga2)
    ansible.builtin.uri:
      url: '{{ monitoring_plugins__icinga2_api_url }}/actions/schedule-downtime'
      validate_certs: false
      user: '{{ monitoring_plugins__icinga2_api_user }}'
      password: '{{ monitoring_plugins__icinga2_api_password }}'
      force_basic_auth: true
      method: 'POST'
      body: >
        {
          "type": "Host",
          "filter": "host.name==\"{{ monitoring_plugins__icinga2_cn }}\"",
          "start_time": "{{ lookup('pipe', 'date +%s') }}",
          "end_time": "{{ lookup('pipe', 'date +%s') | int + 3600 }}",
          "author": "Ansible Role linuxfabrik.lfops.monitoring_plugins",
          "comment": "Downtime during deployment of the monitoring-plugins",
          "all_services": true
        }
      body_format: 'json'
      status_code: 200
      headers:
        Accept: 'application/json'
    when: '(monitoring_plugins__icinga2_api_url is defined and monitoring_plugins__icinga2_api_url | length)
      and (monitoring_plugins__icinga2_api_user is defined and monitoring_plugins__icinga2_api_user | length)
      and (monitoring_plugins__icinga2_api_password is defined and monitoring_plugins__icinga2_api_password | length)'
    delegate_to: 'localhost'
    ignore_errors: true

  - name: 'Stop the Icinga2 service'
    ansible.windows.win_service:
      name: 'Icinga 2'
      state: 'stopped'
    register: 'monitoring_plugins__icinga2_service_stop_result'
    # ignore errors if the service does not exist
    failed_when: 'monitoring_plugins__icinga2_service_stop_result["failed"] is defined and monitoring_plugins__icinga2_service_stop_result["failed"] and not "is not installed" in monitoring_plugins__icinga2_service_stop_result["msg"]'

  tags:
    - 'monitoring_plugins'


- block:

  - ansible.builtin.include_tasks: 'windows-download.yml'
    vars:
      file_type: 'compiled'
      unzip_path: 'C:\Program Files\icinga2\sbin\linuxfabrik\'

  tags:
    - 'monitoring_plugins'


- block:

  - name: 'Remove the downtime for the host (Windows)'
    ansible.builtin.uri:
      url: '{{ monitoring_plugins__icinga2_api_url }}/actions/remove-downtime'
      validate_certs: false
      user: '{{ monitoring_plugins__icinga2_api_user }}'
      password: '{{ monitoring_plugins__icinga2_api_password }}'
      force_basic_auth: true
      method: 'POST'
      body: >
        {
          "type": "Downtime",
          "filter": "host.name==\"{{ monitoring_plugins__icinga2_cn }}\" && downtime.author==\"Ansible Role linuxfabrik.lfops.monitoring_plugins\""
        }
      body_format: 'json'
      status_code: 200
      headers:
        Accept: 'application/json'
    when: '(monitoring_plugins__icinga2_api_url is defined and monitoring_plugins__icinga2_api_url | length)
      and (monitoring_plugins__icinga2_api_user is defined and monitoring_plugins__icinga2_api_user | length)
      and (monitoring_plugins__icinga2_api_password is defined and monitoring_plugins__icinga2_api_password | length)'
    delegate_to: 'localhost'
    ignore_errors: true # we still want to start the icinga2 service again

  - name: 'Start the Icinga2 service'
    ansible.windows.win_service:
      name: 'Icinga 2'
      state: 'started'
    register: 'monitoring_plugins__icinga2_service_start_result'
    # ignore errors if the service does not exist
    failed_when: 'monitoring_plugins__icinga2_service_start_result["failed"] is defined and monitoring_plugins__icinga2_service_start_result["failed"] and not "is not installed" in monitoring_plugins__icinga2_service_start_result["msg"]'

  tags:
    - 'monitoring_plugins'
