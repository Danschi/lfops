- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ lookup("first_found", __task_file) }}'
  vars:
    __task_file:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
  ignore_errors: true # TODO: this probably is a bug in the first_found lookup, according to the doc skip=true should work. else improve the ignore_errors statement
  tags:
    - 'mariadb_server'
    - 'mariadb_server:dump'


- block:

  - name: 'dnf -y install mariadb-server libzstd'
    ansible.builtin.package:
      name:
        - 'mariadb-server'
        - 'libzstd'
      state: 'present'

  tags:
    - 'mariadb_server'


- block:

  - name: 'Get the list of installed packages'
    ansible.builtin.package_facts:  # yamllint disable-line rule:empty-values
    check_mode: false # run task even if `--check` is specified

  - name: 'Get mariadb-server version'
    ansible.builtin.set_fact:
      mariadb_server__installed_version: '{{ (ansible_facts["packages"]["MariaDB-server"][0]["version"] | d(ansible_facts["packages"]["mariadb-server"][0]["version"])) | regex_replace("\.\d+$", "") }}' # strip the patch version

  - name: 'Load default values for {{ mariadb_server__installed_version }}'
    ansible.builtin.include_vars: 'defaults/{{ mariadb_server__installed_version }}.yml'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:database'
    - 'mariadb_server:dump'
    - 'mariadb_server:secure_installation'
    - 'mariadb_server:state'
    - 'mariadb_server:sys_schema'
    - 'mariadb_server:user'


- block:

  - name: 'mkdir /var/log/mariadb'
    ansible.builtin.file:
      path: '/var/log/mariadb'
      state: 'directory'
      owner: 'mysql'
      group: 'mysql'
      mode: 0o755

  - name: 'touch /var/log/mariadb/mariadb.log; chown mysql:mysql /var/log/mariadb/mariadb.log'
    ansible.builtin.file:
      path: '/var/log/mariadb/mariadb.log'
      state: 'touch'
      owner: 'mysql'
      group: 'mysql'
      mode: 0o660

  - name: 'Deploy /etc/my.cnf.d/z00-linuxfabrik.cnf'
    ansible.builtin.template:
      src: 'etc/my.cnf.d/{{ mariadb_server__installed_version }}-z00-linuxfabrik.cnf.j2'
      dest: '/etc/my.cnf.d/z00-linuxfabrik.cnf'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'mariadb_server: restart mariadb'

  - name: 'mkdir -p /etc/systemd/system/mariadb.service.d/'
    ansible.builtin.file:
      path: '/etc/systemd/system/mariadb.service.d/'
      state: 'directory'

  - name: 'Deploy /etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf.j2'
      dest: '/etc/systemd/system/mariadb.service.d/socket-selinux-workaround.conf'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__socket_selinux_workaround_result'
    notify: 'mariadb_server: restart mariadb'

  - name: 'systemctl daemon-reload'
    ansible.builtin.systemd:
      daemon_reload: true
    when: 'mariadb_server__socket_selinux_workaround_result is changed'

  - name: 'Deploy /etc/logrotate.d/mariadb'
    ansible.builtin.template:
      src: 'etc/logrotate.d/mariadb.j2'
      dest: '/etc/logrotate.d/mariadb'
      owner: 'root'
      mode: 0o644

  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'


- block:

  - name: 'systemctl {{ mariadb_server__enabled | bool | ternary("enable", "disable") }} mariadb.service'
    ansible.builtin.service:
      name: 'mariadb.service'
      enabled: '{{ mariadb_server__enabled }}'

  - name: 'systemctl {{ mariadb_server__state[:-2] }} mariadb.service'
    ansible.builtin.service:
      name: 'mariadb.service'
      state: '{{ mariadb_server__state }}'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:state'


# mysql_secure_installation
- block:

  - name: 'Create new DBA "{{ mariadb_server__admin_login["username"] }}" after a fresh installation'
    ansible.builtin.shell: |-
      mysql --unbuffered --execute 'create user if not exists "{{ mariadb_server__admin_login['username'] }}"@"{{ item }}" identified by "{{ mariadb_server__admin_login['password'] }}";'
      mysql --unbuffered --execute 'grant all privileges on *.* to "{{ mariadb_server__admin_login['username'] }}"@"{{ item }}" with grant option;'
      mysql --unbuffered --execute 'flush privileges;'
    loop: '{{ mariadb_server__admin_host }}'
    register: 'mariadb_server__admin_login_result'
    changed_when: 'mariadb_server__admin_login_result["stderr"] is not match("ERROR \d+ \(28000\).*")'
    failed_when: 'mariadb_server__admin_login_result["rc"] != 0 and mariadb_server__admin_login_result["stderr"] is not match("ERROR \d+ \(28000\).*")'

  - name: 'Secure installation the same way mysql_secure_installation does (<= 10.3)'
    ansible.builtin.command: "mysql --unbuffered --execute '{{ item }}'"
    loop:
      - 'delete from mysql.user where user="";'
      - 'drop database if exists test;'
      - 'delete from mysql.db where db="test" or db="test\\_%";'
      - 'flush privileges;'
      - 'drop user if exists "root"@"::1"'
      - 'drop user if exists "root"@"localhost"'
      - 'drop user if exists "root"@"localhost"'
    register: 'mariadb_server__secure_installation_result'
    changed_when: 'mariadb_server__secure_installation_result["stderr"] is not match("ERROR \d+ \(28000\).*")'
    failed_when: 'mariadb_server__secure_installation_result["rc"] != 0 and mariadb_server__secure_installation_result["stderr"] is not match("ERROR \d+ \(28000\).*")'
    when:
      - 'mariadb_server__installed_version is version("10.3", "<=")'

  - name: 'Secure installation the same way mysql_secure_installation does (>= 10.4)'
    ansible.builtin.command: "mysql --unbuffered --execute '{{ item }}'"
    loop:
      - 'delete from mysql.global_priv where user="";'
      - 'drop database if exists test;'
      - 'delete from mysql.db where db="test" or db="test\\_%";'
      - 'flush privileges;'
      - 'drop user if exists "root"@"::1"'
      - 'drop user if exists "root"@"localhost"'
      - 'drop user if exists "root"@"localhost"'
    register: 'mariadb_server__secure_installation_result'
    changed_when: 'mariadb_server__secure_installation_result["stderr"] is not match("ERROR \d+ \(28000\).*")'
    failed_when: 'mariadb_server__secure_installation_result["rc"] != 0 and mariadb_server__secure_installation_result["stderr"] is not match("ERROR \d+ \(28000\).*")'
    when:
      - 'mariadb_server__installed_version is version("10.4", ">=")'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:secure_installation'


# configure backup (mariadb-dump user, scripts and timer)
- block:

  - name: 'dnf -y install {{ mariadb_server__dump_mydumper_package }}'
    ansible.builtin.dnf:
      name:
        - '{{ mariadb_server__dump_mydumper_package }}'
      state: 'present'
      disable_gpg_check: true

  - name: 'Deploy /usr/local/bin/mariadb-dump'
    ansible.builtin.template:
      src: 'usr/local/bin/mariadb-dump.j2'
      dest: '/usr/local/bin/mariadb-dump'
      mode: 0o755

  - name: 'Deploy /etc/mariadb-dump.conf'
    ansible.builtin.template:
      src: 'etc/mariadb-dump.conf.j2'
      dest: '/etc/mariadb-dump.conf'
      mode: 0o600

  - name: 'Grant backup privileges on dbs.tables to {{ mariadb_server__dump_login["username"] }}@{{ mariadb_server__dump_user_host }}'
    linuxfabrik.lfops.mariadb_user:
      login_user: '{{ mariadb_server__admin_login["username"] }}'
      login_password: '{{ mariadb_server__admin_login["password"] }}'
      user: '{{ mariadb_server__dump_login["username"] }}'
      host: '{{ mariadb_server__dump_user_host }}'
      password: '{{ mariadb_server__dump_login["password"] }}'
      priv: '{{ mariadb_server__dump_user_priv }}'
      state: '{{ mariadb_server__dump_user_state }}'
    vars:
      ansible_python_interpreter: '/usr/libexec/platform-python'

  - name: 'Deploy /etc/systemd/system/mariadb-dump.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb-dump.service.j2'
      dest: '/etc/systemd/system/mariadb-dump.service'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'Deploy /etc/systemd/system/mariadb-dump.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/mariadb-dump.timer.j2'
      dest: '/etc/systemd/system/mariadb-dump.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    register: 'mariadb_server__dump_systemd_timer_result'

  - name: 'systemctl enable mariadb-dump.timer --now'
    ansible.builtin.systemd:
      name: 'mariadb-dump.timer'
      state: 'started'
      enabled: true
      daemon_reload: '{{ mariadb_server__dump_systemd_timer_result is changed }}'

  when:
    - 'mariadb_server__dump_login is defined'
    - 'mariadb_server__dump_login | length'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:dump'


# database management
- block:

  - name: 'Create or delete mariadb databases'
    community.mysql.mysql_db:
      login_user: '{{ mariadb_server__admin_login["username"] }}'
      login_password: '{{ mariadb_server__admin_login["password"] }}'
      name: '{{ item["name"] }}'
      collation: '{{ item["collation"] | default("utf8_general_ci") }}'
      encoding: '{{ item["encoding"] | default("utf8") }}'
      state: '{{ item["state"] | default("present") }}'
    loop: '{{ mariadb_server__databases__combined_var }}'
    vars:
      ansible_python_interpreter: '/usr/libexec/platform-python'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:database'


# user management
- block:

  - name: 'Create, update or delete MariaDB users'
    linuxfabrik.lfops.mariadb_user:
      login_user: '{{ mariadb_server__admin_login["username"] }}'
      login_password: '{{ mariadb_server__admin_login["password"] }}'
      user: '{{ item["username"] }}'
      host: '{{ item["host"] | default("localhost") }}'
      password: '{{ item["password"] | default(omit) }}'
      priv: '{{ item["priv"] | default(omit) }}'
      state: '{{ item["state"] | default("present") }}'
    loop: '{{ mariadb_server__users__combined_var }}'
    no_log: true
    vars:
      ansible_python_interpreter: '/usr/libexec/platform-python'

  tags:
    - 'mariadb_server'
    - 'mariadb_server:user'


# sys schema
- block:

  - name: 'Create directories for mariadb_sys_schema'
    ansible.builtin.file:
      path: '/tmp/mariadb_sys_schema/{{ item["path"] }}'
      state: 'directory'
      mode: '{{ item["mode"] }}'
    loop: '{{ query("filetree", "templates/tmp/mariadb_sys_schema") }}'
    when: 'item["state"] == "directory"'
    changed_when: false # no actual change to the application

  - name: 'Deploy collection of views, functions and procedures to help MariaDB administrators get insight in to MariaDB Database usage'
    ansible.builtin.template:
      src: '{{ item["src"] }}'
      # we copied all files 1:1 from https://github.com/FromDual/mariadb-sys and did not change
      # the file extension to .j2 (we did not even change the content of the files); however, for
      # future-proofing purposes, we would like to treat all files as Jinja templates, and if they
      # ever have a .j2 extension, remove it.
      dest: '/tmp/mariadb_sys_schema/{{ item["path"] | trim(".j2") }}'
      mode: '{{ item["mode"] }}'
    loop: '{{ query("filetree", "templates/tmp/mariadb_sys_schema") }}'
    when: 'item["state"] == "file"'
    changed_when: false # no actual change to the application

  - name: 'Delete any existing "sys" schema'
    community.mysql.mysql_db:
      login_user: '{{ mariadb_server__admin_login["username"] }}'
      login_password: '{{ mariadb_server__admin_login["password"] }}'
      name: 'sys'
      state: 'absent'

  - name: 'mysql --user "{{ mariadb_server__admin_login["username"] }}" --password="..." < ./sys_10.sql'
    # do NOT do: --password "{{ mariadb_server__admin_login["password"] }}" - this way mysql expects the input from STDIN and treats the password as a database name
    ansible.builtin.shell: 'mysql --user "{{ mariadb_server__admin_login["username"] }}" --password="{{ mariadb_server__admin_login["password"] }}" < ./sys_10.sql'
    args:
      chdir: '/tmp/mariadb_sys_schema'
    changed_when: false

  - name: 'rm -rf /tmp/mariadb_sys_schema'
    ansible.builtin.file:
      path: '/tmp/mariadb_sys_schema'
      state: 'absent'
    changed_when: false # no actual change to the application

  tags:
    - 'never'
    - 'mariadb_server:sys_schema'


- name: 'Flush handlers so that the mariadb can be used by other roles later'
  ansible.builtin.meta: 'flush_handlers'
  tags:
    - 'mariadb_server'
    - 'mariadb_server:configure'
    - 'mariadb_server:database'
    - 'mariadb_server:dump'
    - 'mariadb_server:secure_installation'
    - 'mariadb_server:state'
    - 'mariadb_server:sys_schema'
    - 'mariadb_server:user'
