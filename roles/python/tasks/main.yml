- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ __task_file }}'
  when: '__task_file | length'
  vars:
    __task_file: '{{ lookup("ansible.builtin.first_found", __first_found_options) }}'
    __first_found_options:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
      skip: true
  tags:
    - 'always'


- block:

  - name: 'Install python{{ python__version }}'
    ansible.builtin.package:
      name:
        - 'python{{ python__version }}'
      state: 'present'

  - name: 'Combined Modules:'
    ansible.builtin.debug:
      var: 'python__modules__combined_var'

  - name: 'Install additional python modules'
    ansible.builtin.package:
      name: '{{ (python__modules__combined_var | selectattr("state", "defined") | selectattr("state", "ne", "absent") | map(attribute="name"))
          + (python__modules__combined_var | selectattr("state", "undefined") | map(attribute="name")) }}'
      state: 'present'

  - name: 'Remove additional python modules'
    ansible.builtin.package:
      name: '{{ python__modules__combined_var | selectattr("state", "defined") | selectattr("state", "eq", "absent") | map(attribute="name") }}'
      state: 'absent'

  # block
  when: 'ansible_facts["os_family"] != "Windows"'
  tags:
    - 'python'
