- block:

  - name: 'Make sure that Ansible local facts directory exists'
    ansible.builtin.file:
      path: '/etc/ansible/facts.d'
      state: 'directory'
      owner: 'root'
      group: 'root'
      mode: '0755'

  tags:
    - 'nextcloud'


- block:

  - name: 'semanage fcontext -a -t ...'
    ansible.builtin.sefcontext:
      setype: '{{ item.key }}'
      target: '{{ item.value }}'
      state: 'present'
    with_dict:
      - httpd_sys_rw_content_t: '/data(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/.htaccess'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/.user.ini'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/3rdparty/aws/aws-sdk-php/src/data/logs(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/apps(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/config(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/data(/.*)?'
    vars:
      ansible_python_interpreter: '/usr/libexec/platform-python'

  - name: 'setsebool -P ...'
    ansible.posix.seboolean:
      name: '{{ item.key }}'
      state: '{{ item.value }}'
      persistent: true
    with_dict:
      - httpd_can_network_connect: true
    vars:
      ansible_python_interpreter: '/usr/libexec/platform-python'
    # ignore errors if selinux is disabled
    failed_when:
      - 'sshd__seport_result["failed"] is defined'
      - 'sshd__seport_result["failed"]'
      - 'not "SELinux is disabled on this host." in sshd__seport_result["msg"]'

  tags:
    - 'nextcloud'
    - 'nextcloud:selinux'


- block:

  - name: 'dnf -y install bzip2 samba-client'
    ansible.builtin.package:
      name:
        - 'bzip2'
        - 'samba-client'
      state: 'present'

  - name: 'wget https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
    ansible.builtin.get_url:
      url: 'https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
      dest: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'

  - name: 'bunzip /tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'
    ansible.builtin.unarchive:
      src: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'
      dest: '/var/www/html/'
      remote_src: true

  - name: 'mkdir /data; chown -R apache:apache /data; chmod 0750 -R /data'
    ansible.builtin.file:
      path: '/data'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o750
      recurse: true

  - name: 'restorecon -Fvr /data'
    ansible.builtin.command: 'restorecon -Fvr /data'
    register: 'nextcloud__restorecon_data_result'
    changed_when: 'nextcloud__restorecon_data_result["stdout"] | length'

  - name: 'mkdir /var/www/html/nextcloud/data'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud/data'
      state: 'directory'
      owner: 'apache'
      group: 'apache'
      mode: 0o750

  - name: 'restorecon -Fvr /var/www/html/nextcloud'
    ansible.builtin.command: 'restorecon -Fvr /var/www/html/nextcloud'
    register: 'nextcloud__restorecon_nextcloud_result'
    changed_when: 'nextcloud__restorecon_nextcloud_result["stdout"] | length'

  - name: 'chmod +x /var/www/html/nextcloud/occ'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud/occ'
      mode: 0o755

  - name: 'Run nextcloud installer'
    # installation hangs without "--admin-user" and "--admin-pass"
    ansible.builtin.command: >-
      sudo -u apache php occ maintenance:install
      --admin-pass '{{ nextcloud__users.0.password }}'
      --admin-user '{{ nextcloud__users.0.username }}'
      --data-dir '{{ nextcloud__datadir }}'
      --database 'mysql'
      --database-host '{{ nextcloud__database_host }}'
      --database-name '{{ nextcloud__database_name }}'
      --database-user '{{ nextcloud__mariadb_login.username }}'
      --database-pass '{{ nextcloud__mariadb_login.password }}'
    args:
      chdir: '/var/www/html/nextcloud/'
      creates: '/var/www/html/nextcloud/config/config.php'

  # You can't setup S3 after your installation. S3 as primary has to be setup before you install,
  # but modifying the system configuration via occ is not available until Nextcloud is installed.
  # Therefore deploying Object Storage settings as a template into a separate configuration file.
  - name: 'Deploy /var/www/html/nextcloud/config/objectstore.config.php'
    ansible.builtin.template:
      src: 'var/www/html/nextcloud/config/objectstore.config.php.j2'
      dest: '/var/www/html/nextcloud/config/objectstore.config.php'
      owner: 'apache'
      group: 'apache'
      mode: 0o640
    when:
      - '(nextcloud__objectstore_s3 is defined and nextcloud__objectstore_s3 | length) or 
         (nextcloud__objectstore_swift is defined and nextcloud__objectstore_swift | length)'

  - name: 'chown -R apache:apache /var/www/html/nextcloud'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud'
      owner: 'apache'
      group: 'apache'
      recurse: true

  - name: 'Check if role state file exists'
    stat:
      path: '/etc/ansible/facts.d/nextcloud.fact'
    register: 'nextcloud_fact'

  tags:
    - 'nextcloud'


- block:

  - name: 'Disable every possible Nextcloud App on initial setup, but do this only once'
    ansible.builtin.command: |
      sudo -u apache php occ app:disable {{ item }}
    loop:
      # commented modules can't be disabled
      - 'accessibility'
      - 'activity'
      - 'circles'
      # - 'cloud_federation_api'
      - 'comments'
      - 'contactsinteraction'
      - 'dashboard'
      # - 'dav'
      # - 'federatedfilesharing'
      - 'federation'
      # - 'files'
      - 'files_pdfviewer'
      - 'files_rightclick'
      - 'files_sharing'
      - 'files_trashbin'
      - 'files_versions'
      - 'files_videoplayer'
      - 'firstrunwizard'
      - 'logreader'
      # - 'lookup_server_connector'
      - 'nextcloud_announcements'
      - 'notifications'
      # - 'oauth2'
      - 'password_policy'
      - 'photos'
      - 'privacy'
      # - 'provisioning_api'
      - 'recommendations'
      - 'serverinfo'
      # - 'settings'
      - 'sharebymail'
      - 'support'
      - 'survey_client'
      - 'systemtags'
      - 'text'
      - 'theming'
      # - 'twofactor_backupcodes'
      - 'updatenotification'
      - 'user_status'
      # - 'viewer'
      - 'weather_status'
      # - 'workflowengine'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Install and enable Nextcloud Apps on initial setup, do this only once'
    ansible.builtin.command: |
      sudo -u apache php occ app:install {{ item }}
    loop:
      - 'bruteforcesettings'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Enable a subset of pre-installed Nextcloud Apps on initial setup, do this only once'
    ansible.builtin.command: |
      sudo -u apache php occ app:enable {{ item }}
    loop:
      - 'files_pdfviewer'
      - 'files_rightclick'
      - 'files_sharing'
      - 'files_trashbin'
      - 'files_versions'
      - 'files_videoplayer'
      - 'password_policy'
      - 'serverinfo'
      - 'sharebymail'
      - 'text'
      - 'theming'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Create a role state file'
    ansible.builtin.file:
      dest: '/etc/ansible/facts.d/nextcloud.fact'
      owner: 'root'
      group: 'root'
      mode: '0600'
      state: 'touch'

  when:
    - 'not nextcloud_fact.stat.exists'
  tags:
    - 'nextcloud'


- block:

  - name: 'Set Nextcloud system settings'
    ansible.builtin.command: |
      sudo -u apache php occ config:system:set {{ item.key }} {{ item.value }}
    loop: '{{ nextcloud__sysconfig }}'
    args:
      chdir: '/var/www/html/nextcloud/'

  - name: 'Set Nextcloud proxy settings'
    ansible.builtin.command: |
      sudo -u apache php occ config:system:set {{ item.key }} {{ item.value }}
    loop: '{{ nextcloud__proxyconfig }}'
    when:
      - 'nextcloud__proxyconfig is defined'
      - 'nextcloud__proxyconfig | length'
    args:
      chdir: '/var/www/html/nextcloud/'

  - name: 'Convert some database columns to big int'
    ansible.builtin.command: |
      sudo -u apache php occ db:convert-filecache-bigint --no-interaction
    args:
      chdir: '/var/www/html/nextcloud/'
    register: 'nextcloud__convert_filecache_bigint_result'
    changed_when: '"All tables already up to date" not in nextcloud__convert_filecache_bigint_result["stdout"]'

  - name: 'Nextcloud: Restart php-fpm to reflect all changes'
    ansible.builtin.service:
      name: 'php-fpm'
      state: 'restarted'

  tags:
    - 'nextcloud'
    - 'nextcloud:sysconfig'


- block:

  - name: 'Disable Nextcloud Apps'
    ansible.builtin.command: |
      sudo -u apache php occ app:disable {{ item }}
    loop: '{{ nextcloud__apps | selectattr("state", "defined") | selectattr("state", "eq", "absent") | map(attribute="name") }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Install Nextcloud Apps'
    ansible.builtin.command: |
      sudo -u apache php occ app:install {{ item }}
    loop: '{{ (nextcloud__apps | selectattr("state", "defined") | selectattr("state", "ne", "absent") | map(attribute="name"))
          + (nextcloud__apps | selectattr("state", "undefined") | map(attribute="name")) }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Enable Nextcloud Apps'
    ansible.builtin.command: |
      sudo -u apache php occ app:enable {{ item }}
    loop: '{{ (nextcloud__apps | selectattr("state", "defined") | selectattr("state", "ne", "absent") | map(attribute="name"))
          + (nextcloud__apps | selectattr("state", "undefined") | map(attribute="name")) }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  - name: 'Set Nextcloud App Settings'
    ansible.builtin.command: |
      sudo -u apache php occ config:app:set {{ item.key }} {{ item.value }}
    loop: '{{ nextcloud__apps_config }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false
    ignore_errors: true

  tags:
    - 'nextcloud'
    - 'nextcloud:apps'


- block:

  # nested loop construct (for user in users; for setting in user.settings; ...)
  - ansible.builtin.include_tasks: 'create-user.yml'
    loop: '{{ nextcloud__users }}'
    loop_control:
      loop_var: 'ncuser'

  tags:
    - 'nextcloud'
    - 'nextcloud:user'


- block:

  - name: 'Set background job to "cron"'
    ansible.builtin.command: |
      sudo -u apache php occ background:cron
    args:
      chdir: '/var/www/html/nextcloud/'

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.service.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.service'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.timer.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.service.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.service'
      owner: 'root'
      group: 'root'
      mode: 0o644

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.timer.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  tags:
    - 'nextcloud'
    - 'nextcloud:cron'


- block:

  - name: 'systemctl {{ nextcloud__timer_jobs_enabled | bool | ternary("enable", "disable") }} nextcloud-jobs.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-jobs.timer'
      state: '{{ nextcloud__timer_jobs_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_jobs_enabled }}'

  - name: 'systemctl {{ nextcloud__timer_app_update_enabled | bool | ternary("enable", "disable") }} nextcloud-app-update.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-app-update.timer'
      state: '{{ nextcloud__timer_app_update_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_app_update_enabled }}'

  tags:
    - 'nextcloud'
    - 'nextcloud:state'


- block:

  - name: 'Deploy /usr/local/bin/nextcloud-update'
    ansible.builtin.template:
      src: 'usr/local/bin/nextcloud-update.j2'
      dest: '/usr/local/bin/nextcloud-update'
      owner: 'root'
      group: 'root'
      mode: 0o755

  tags:
    - 'nextcloud'
    - 'nextcloud:update_script'
