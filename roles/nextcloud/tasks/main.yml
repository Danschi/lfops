- name: 'Perform platform/version specific tasks'
  ansible.builtin.include_tasks: '{{ lookup("first_found", __task_file) }}'
  vars:
    __task_file:
      files:
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["distribution"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}{{ ansible_facts["distribution_major_version"] }}.yml'
        - '{{ ansible_facts["os_family"] }}.yml'
      paths:
        - '{{ role_path }}/tasks'
  ignore_errors: true # TODO: this probably is a bug in the first_found lookup, according to the doc skip=true should work. else improve the ignore_errors statement
  tags:
    - 'always'


- block:

  - name: 'semanage fcontext -a -t ...'
    vars:
      ansible_python_interpreter: '/usr/bin/python3.6'
    ansible.builtin.sefcontext:
      setype: '{{ item.key }}'
      target: '{{ item.value }}'
      state: 'present'
    with_dict:
      - httpd_sys_rw_content_t: '/data(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/.htaccess'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/.user.ini'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/3rdparty/aws/aws-sdk-php/src/data/logs(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/apps(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/config(/.*)?'
      - httpd_sys_rw_content_t: '/var/www/html/nextcloud/data(/.*)?'

  - name: 'setsebool -P ...'
    vars:
      ansible_python_interpreter: '/usr/bin/python3.6'
    ansible.posix.seboolean:
      name: '{{ item.key }}'
      state: '{{ item.value }}'
      persistent: true
    with_dict:
      - httpd_can_network_connect: true

  tags:
    - 'nextcloud'
    - 'nextcloud:selinux'


- block:

  - name: 'dnf -y install bzip2 samba-client'
    ansible.builtin.package:
      name:
        - 'bzip2'
        - 'samba-client'
      state: 'present'

  - name: 'wget https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
    ansible.builtin.get_url:
      url: 'https://download.nextcloud.com/server/releases/{{ nextcloud__version }}.tar.bz2'
      dest: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'

  - name: 'bunzip /tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'
    ansible.builtin.unarchive:
      src: '/tmp/nextcloud-{{ nextcloud__version }}.tar.bz2'
      dest: '/var/www/html/'
      remote_src: true

  - name: 'mkdir /data'
    ansible.builtin.file:
      path: '/data'
      state: 'directory'
  
  - name: 'restorecon -Fvr /data'
    ansible.builtin.command: 'restorecon -Fvr /data'
    changed_when: false

  - name: 'chown -R apache:apache /data'
    ansible.builtin.file:
      path: '/data'
      owner: 'apache'
      group: 'apache'
      recurse: true

  - name: 'mkdir /var/www/html/nextcloud/data'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud/data'
      state: 'directory'

  - name: 'restorecon -Fvr /var/www/html/nextcloud'
    ansible.builtin.command: 'restorecon -Fvr /var/www/html/nextcloud'
    changed_when: false

  - name: 'chown -R apache:apache /var/www/html/nextcloud'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud'
      owner: 'apache'
      group: 'apache'
      recurse: true

  - name: 'usermod --append redis apache'
    ansible.builtin.user:
      name: 'apache'
      groups: 'redis'
      append: true

  - name: 'chmod +x /var/www/html/nextcloud/occ'
    ansible.builtin.file:
      path: '/var/www/html/nextcloud/occ'
      mode: 0o755

  tags:
    - 'nextcloud'


- block:

  - name: 'Run nextcloud installer'
    # installation hangs without "--admin-user" and "--admin-pass"
    ansible.builtin.shell: |
      sudo -u apache php occ maintenance:install \
        --database 'mysql' \
        --database-name '{{ nextcloud__database }}' \
        --database-user '{{ nextcloud__mariadb_login.username }}' \
        --database-pass '{{ nextcloud__mariadb_login.password }}' \
        --admin-user '{{ nextcloud__users.0.username }}' \
        --admin-pass '{{ nextcloud__users.0.password }}' \
        --data-dir '{{ nextcloud__datadir }}'
    args:
      chdir: '/var/www/html/nextcloud/'
      creates: '/var/www/html/nextcloud/config/config.php'

    # sudo -u apache php occ config:system:set 'redis' 'port --value=0'
  - name: 'Set nextcloud system settings'
    ansible.builtin.shell: |
      sudo -u apache php occ config:system:set {{ item.key }} {{ item.value }}
    with_items: '{{ nextcloud__sysconfig }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false

  - name: 'Set nextcloud proxy settings'
    ansible.builtin.shell: |
      sudo -u apache php occ config:system:set {{ item.key }} {{ item.value }}
    with_items: '{{ nextcloud__proxyconfig }}'
    when:
      - 'nextcloud__proxyconfig is defined'
      - 'nextcloud__proxyconfig | length'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false

  - name: 'Set nextcloud app settings'
    ansible.builtin.shell: |
      sudo -u apache php occ config:app:set {{ item.key }} {{ item.value }}
    with_items: '{{ nextcloud__appconfig }}'
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false

  - name: 'Convert some database columns to big int'
    ansible.builtin.shell: |
      sudo -u apache php occ db:convert-filecache-bigint --no-interaction
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false

  # TODO: here? or run via the php-role? or via handler?
  # needed to reflect all the changes to the aggressive php opcache settings
  - name: 'nextcloud: restart php-fpm'
    ansible.builtin.service:
      name: 'php-fpm'
      state: 'restarted'

  tags:
    - 'nextcloud'
    - 'nextcloud:occ'


- block:

  - name: 'Create Nextcloud users'
    # use "su -s /bin/sh apache -c" instead of "sudo -u apache" because of "export"
    ansible.builtin.shell: |
      export OC_PASS='{{ item.password }}'; \
      su -s /bin/sh apache -c 'php occ user:add \
        --password-from-env \
        --group {{ item.group | d('""')}} \
        {{ item.username }}'
    register: 'nextcloud__shell_result'
    failed_when:
      - 'nextcloud__shell_result.rc != 0'
      - '" already exists" not in nextcloud__shell_result.stdout | lower'
    changed_when: false
    args:
      chdir: '/var/www/html/nextcloud/'
    loop: '{{ nextcloud__users | d([]) }}'

  # nested loop construct (for user in users; for setting in user.settings; ...)
  - ansible.builtin.include_tasks: 'configure-user.yml'
    loop: '{{ nextcloud__users | d([]) }}'
    loop_control:
      loop_var: 'ncuser'

  tags:
    - 'nextcloud'
    - 'nextcloud:user'


- block:

  - name: 'Set background job to "cron"'
    ansible.builtin.shell: |
      sudo -u apache php occ background:cron
    args:
      chdir: '/var/www/html/nextcloud/'
    changed_when: false

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.service.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-jobs.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-jobs.timer.j2'
      dest: '/etc/systemd/system/nextcloud-jobs.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.service'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.service.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.service'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  - name: 'Deploy /etc/systemd/system/nextcloud-app-update.timer'
    ansible.builtin.template:
      src: 'etc/systemd/system/nextcloud-app-update.timer.j2'
      dest: '/etc/systemd/system/nextcloud-app-update.timer'
      owner: 'root'
      group: 'root'
      mode: 0o644
    notify: 'nextcloud: systemctl daemon-reload'

  tags:
    - 'nextcloud'
    - 'nextcloud:cron'


- block:

  - name: 'systemctl {{ nextcloud__timer_jobs_enabled | bool | ternary("enable", "disable") }} nextcloud-jobs.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-jobs.timer'
      state: '{{ nextcloud__timer_jobs_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_jobs_enabled }}'

  - name: 'systemctl {{ nextcloud__timer_app_update_enabled | bool | ternary("enable", "disable") }} nextcloud-app-update.timer --now'
    ansible.builtin.systemd:
      name: 'nextcloud-app-update.timer'
      state: '{{ nextcloud__timer_app_update_enabled | bool | ternary("started", "stopped") }}'
      enabled: '{{ nextcloud__timer_app_update_enabled }}'

  tags:
    - 'nextcloud'
    - 'nextcloud:state'


- block:

  - name: 'Deploy /usr/local/bin/nextcloud-update'
    ansible.builtin.template:
      src: 'usr/local/bin/nextcloud-update.j2'
      dest: '/usr/local/bin/nextcloud-update'
      owner: 'root'
      mode: 0o755

  tags:
    - 'nextcloud'
    - 'nextcloud:script'
